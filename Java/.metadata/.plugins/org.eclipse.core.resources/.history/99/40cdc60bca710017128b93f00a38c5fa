package ex7_Ch4;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Stack;

public class Topological_Sort {
	private Graph<Character> g = new Graph<>();
	private void read() {
		File input = new File("D:\\Users\\Rares\\Documents\\Algorithm_Questions\\Java\\ex7_Ch4\\src\\input.txt");
		Scanner in;
		try {
			in = new Scanner(input);
			
		int nr_nodes = in.nextInt();
		in.nextLine();
		int i = 0;
		int count;
		while(i < nr_nodes && in.hasNextLine()) {
			char a = in.nextLine().charAt(0);
			Character d = new Character(a);
			ArrayList<Character> neigh = new ArrayList<Character>();
			
			if(in.hasNext()){
				String s = in.nextLine();
				String [] c =  s.split(" ");
				Character temp;
				for(count = 0; count < c.length; count++) {
					 temp = new Character(c[count].charAt(0));
					 neigh.add(temp);
				}
			}
			
			Node<Character> node = new Node<Character>(neigh);
			g.addNode(d,node);
			i++;
		}
		if(i < nr_nodes) System.out.println("the input is not enaugh");
		in.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		g.setIncomming();
	}
	
	private void afish() {
		HashMap<Character, Node<Character>> ed = g.getNodes();
		for(Character key : ed.keySet()){
			ArrayList<Character> neigh = ed.get(key).neigh;
			for(Character node : neigh) {
				System.out.print(node + " ");
			}
			System.out.println();
		}
	}

	public void top_sort(){
		HashMap<Character,Node<Character>> map = g.getNodes();
		Stack<Character> noInNodes = g.getNoIncomming_Nodes();
		ArrayList<Character> children;
		Node<Character> aux;
		Node<Character> temp;
		
		if(noInNodes.isEmpty()) System.out.println("topoloical sort cannot be done with thid graph");
		while(!noInNodes.isEmpty()) {
		    temp = map.get(noInNodes.pop());
			children = temp.neigh;
			for(Character c : children){
				aux = map.get(c);
				aux.decrementInbound();
				temp.neigh.remove(c);
			}
			System.out.println(temp + " ");
			//add new nodes with no incoming edges
			noInNodes = g.getNoIncomming_Nodes();
		}
	}
	public static void main(String args[]) {
		Topological_Sort obj = new Topological_Sort();
		obj.read();
		obj.top_sort();
	}
}

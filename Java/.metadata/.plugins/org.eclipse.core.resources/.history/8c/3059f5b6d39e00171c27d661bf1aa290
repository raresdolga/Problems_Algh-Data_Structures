import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;

public class Euller {
	private LinkedList<Integer> [] adj;
	private Graph g;
	public Euller(Graph g){
		this.g = g;
		adj = g.getAdjList();
	}
	public LinkedList<Integer> euler_Path(){
		
		LinkedList<Integer> path = new LinkedList<Integer>();
		int odd_nr = 0, odd_node = 0, even_nr = 0;
		for(int i = 0; i < g.getSize(); i++)
			if(adj[i].size() % 2 == 0){
				even_nr++;
			}
			else {
				odd_nr++;
				odd_node = i;
			}
		if(even_nr == g.getSize()){
			path.addLast(0);
			// start at the first node
			fleuryPath(0,path);
		}
		else
		{
			if(odd_nr == 2){
				path.addLast(odd_node);
				fleuryPath(odd_node,path);
			}
			else
				return null;
		}
		return path;
	}
	
	private void fleuryPath(int node,LinkedList<Integer> path){
		Integer next = null;
		LinkedList<Integer>[] local = Arrays.copyOf(adj, adj.length);
		Iterator<Integer> it = adj[node].iterator();
		int v;
		while(it.hasNext()){
			v = it.next();
			if(!isBridge(node,v,local)){
				next = v;
				break;
			}
		}
		if(next == null){
			if(adj[node].size() != 0)
				next = adj[node].getFirst();
		}
		if(next == null)
			return ;
		
		adj[node].remove(next);
		path.addLast(next);
		fleuryPath(next,path);
	}
	
	private boolean isBridge(Integer n, Integer v, LinkedList<Integer>[] local ){
		
		//local[n].remove(v);
		boolean[] visited = g.dFS(n,local);
		int i = 0;
		while( i < g.getSize() && visited[i]){
			//System.out.println(i + "test");
			i++;
		}
		// push it back after the check
		//local[n].add(v);
		if(i < g.getSize())
			return true;
		return false;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Graph g = new Graph(3);
		g.addEdge(0, 1);
		g.addEdge(0, 2);
		g.addEdge(1, 2);
		Euller eP = new Euller(g);
		LinkedList<Integer> []adj = g.getAdjList();
		
		LinkedList<Integer> path = eP.euler_Path();
	}

}

package ex7_Ch2;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;

import javax.crypto.Mac;

public class Intersect {
	private static HashMap<Node<Integer>,Integer> createRoad(Node<Integer> head1, Node<Integer> head2){
		HashMap<Node<Integer>,Integer> common = new  HashMap<Node<Integer>, Integer>();
		Node<Integer> p1 = head1;
		Node<Integer> p2 = head2;
		while(p1 != null){
			common.put(p1, 0);
			p1 = p1.next;
		}
		
		while(p2 != null){
			common.put(p2, 1);
			p2 = p2.next;
		}
		return common;
	}
	
	/*private static boolean simpleCheck(Node <Integer> head1, Node<Integer> head2){
		Node<Integer> p1 = head1;
		Node<Integer> p2 = head2;
		
		while(p1 != null && p2 != null && p1 != p2){
			p1 = p1.next;
			p2 = p2.next;
		}
		
		if(p1 == p2 && p1 != null)
			return true;
		else 
			return false;
		
	}*/
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner in = new Scanner(System.in);
		Node<Integer> head1 = new Node<Integer>(in.nextInt());
		Node<Integer> aux = head1;
		Node<Integer> t;
		
		while(in.hasNextInt()){
			t = new Node<Integer>(in.nextInt());
			aux.next = t;
			aux = t;
		}
		in = new Scanner(System.in);
		Node<Integer> head2 = new Node<Integer>(in.nextInt());
		aux = head2;

		while(in.hasNextInt()){
			t = new Node<Integer>(in.nextInt());
			aux.next = t;
		    aux = t;
		}
		aux.next = head1;
		HashMap<Node<Integer>,Integer> test = createRoad( head1, head2);
		/* Iterator it = test.entrySet().iterator();
		    while (it.hasNext()) {
		        Map.Entry pair = (Map.Entry)it.next();
		        System.out.println(pair.getKey() + " = " + pair.getValue());
		        it.remove(); // avoids a ConcurrentModificationException
		    }*/
		// now just iterate through the first list again and get the value of the hash map
	aux = head1;
		while(aux != null ){
			if(test.get(aux) == 1){
				System.out.println("Lists have a common node");
				break;
			}
			aux = aux.next;
		}
		if(aux == null)
			System.out.println("Lists do not have a common node");
		
	}

}

package ex9_Ch4;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;


public class BS_waysToGenerate {
	public void insertBS(NodeBS root) {
		
	}
	
	public ArrayList<LinkedList<Integer>> generate(NodeBS root) {
		if(root == null) return new ArrayList<LinkedList<Integer>>();
		ArrayList<LinkedList<Integer>>  total = new ArrayList<LinkedList<Integer>>();
		ArrayList<LinkedList<Integer>>  partial;
		ArrayList<LinkedList<Integer>> waysL = generate(root.left);
		ArrayList<LinkedList<Integer>> waysR = generate(root.left);
		LinkedList<Integer> prefix = new LinkedList<>();
		prefix.addFirst(root.val);
		for(LinkedList<Integer> l : waysL) {
			for(LinkedList<Integer> r : waysR) {
				ArrayList<LinkedList<Integer>>  partial = new ArrayList<LinkedList<Integer>>();
				combine(l,r,partial,prefix);
				total.addAll(total);
			}
		}
		
	}
	
	public void combine(LinkedList<Integer> waysL, LinkedList<Integer> waysR, ArrayList<LinkedList<Integer>> results,LinkedList<Integer> prefix){
		if(waysL.size() == 0 || waysR.size() == 0) {
			@SuppressWarnings("unchecked")
			LinkedList<Integer> temp = (LinkedList<Integer>) prefix.clone();
			results.add(waysL);
			results.add(waysR);
			results.add(temp);
		}
		
		//remove the head of the first list and create combinations with it
		Integer a = waysL.removeFirst();
		prefix.addLast(a);
		combine(waysL,waysR,results,prefix);
		//re-adjust to initial after the call for feature calls i.e waysR calls
		prefix.removeLast();
		waysL.addFirst(a);
		
		//remove head from the second list with the prefix and waysL updated 
		Integer b = waysR.removeFirst();
		prefix.addLast(b);
		combine(waysL,waysR,results,prefix);
		//re-adjust to initial after the call for feature calls i.e waysL calls on the stack
		prefix.removeLast();
		waysR.addFirst(b);;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

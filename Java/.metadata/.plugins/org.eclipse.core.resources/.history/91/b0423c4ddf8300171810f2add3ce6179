package ex9_ch7;

import java.util.Iterator;

public class CircularArray<T extends Comparable<T>> implements Iterable<T>{
	private int size;
	private T[] arr;
	//head indicates to the first element
	private int head = 0;
	
	public CircularArray(int size){
		this.size = size;
		//cannot directly instantiate  from T type
		arr = (T[]) new Object[size];
	}
	
	public CircularArray(T[] arr){
		this.arr = arr;
		this.size = arr.length;
	}
	
	public Iterator<T> iterate(){
		
	}
	
	public int size(){
		return size;
	}
	
	
	//insert method
	
	public void rotate(){
		head += 1;
		if(head >= size)
			head %= size;
	}

	private  class IteratorCA<E extends Comparable<E>> implements Iterator<E>{
		private int index;
		public IteratorCA(){
			index = head;
		}
		
		@Override
		public boolean hasNext(){
			if(index < size + head)
				return true;
			return false;
		}
		
		@Override
		public T next(){
			return arr[index];
		}
	}

}

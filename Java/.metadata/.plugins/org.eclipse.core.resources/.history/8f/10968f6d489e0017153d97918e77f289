import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;

public class Hamiltonia_Graph {
	
	public static boolean hP_path(int [][] adiacency, LinkedList<Integer> remain_nodes, int v){
		if(remain_nodes.size() == 1){
			System.out.println("gsa");
			return true;
			}
		boolean ans = false;
		remain_nodes.removeFirst();
		int [][] copy = eliminate_edges(v,adiacency,remain_nodes);
		/*int k,j;
		for(k = 0; k < adiacency.length; k++){
			for(j = 0; j < adiacency[k].length; j++)
				System.out.print(adiacency[k][j] + " ");
			System.out.println();
		}*/
		//System.out.println(remain_nodes.size());
		for(int n : remain_nodes){
			System.out.println(n);
			if(adiacency[v][n] != 0)
				ans = ans || hP_path(copy,remain_nodes,n);
		}
		return ans;
	}
	
	private static int[][] eliminate_edges(int v, int [][] adj,LinkedList<Integer>remain_nodes){
		int [][] copy = new int [adj.length][adj.length];
		int i, j;
		for(i = 0; i < adj.length; i++){
				copy[i] = Arrays.copyOf(adj[i], adj.length);
		}
		for(int n : remain_nodes){
			copy[n][v] = copy[v][n] = 0;
		}
		return copy;
	}
	public static void main(String args[]){
		int n = 3;
		int [][] adiacency = {
				{0,1,1},
				{1,0,1},
				{1,1,0}
		};
		
		LinkedList<Integer> nodes = new LinkedList<Integer>();
		for(int i = 0; i < n; i++)
			nodes.add(i);
		System.out.println(hP_path(adiacency,nodes,0));
	}
}

package ex7_Ch4;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;

public class Graph<T extends Comparable<T>> {
	private HashMap<T,Node<T>> nodes;
	
	public Graph() {
		nodes = new HashMap<>();
	}
	
	public void addNode(T key,Node<T> n) {
		nodes.put(key,n);
	}
	
	
	public HashMap<T,Node<T>> getNodes() {
		return new HashMap<T,Node<T>>(nodes);
	}
	
	public void setIncomming(){
		Node<T> child;
		ArrayList<T> children;
		for(T a : nodes.keySet()){
			child = nodes.get(a);
			children = child.neigh;
			for(T node : children) {
				// reuse of child
				child = nodes.get(node);
				child.IncrementInbound();
			}
		}
	}
	
	public Stack<T> getNoIncomming_Nodes() {
		Node<T> child ;
		Stack<T> noInc = new Stack<T>();
		for(T a : nodes.keySet()){
			child = nodes.get(a);
			if(child.getInbound() == 0)
				noInc.push(a);
		}
		return noInc;
	}
}
